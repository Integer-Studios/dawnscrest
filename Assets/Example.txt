//using System.Collections;
//using System.Collections.Generic;
//using UnityEngine;
//using UnityEngine.Networking;

// Package Imports
//
// if you use other packages, import them at the top so that it's
// easy to see what inter-dependencies you are involking
// obviously, try to minimize
//
// using PolyPlayer;

// Namespace
//
// using namespaces that correspond to the main folders / module names
// this will help deter from over-dependence
//
// namespace PolyEntity {

//	public class Entity : NetworkBehaviour {

		// Vars : public, protected, private, hide
		/*
		 * Put the variables in this order, make
		 * Everything private by default, if it needs
		 * to give access to children then protected,
		 * if it needs editor input, public.
		 * Try to never have public members other than
		 * Editor inputs, if you do, then put them last,
		 * in the hide in inspector section
		 * 
		 */

		// Syncvars
		/*
		 * put all syncvars separately to give them a better chance at visibility 
		 * they are tricky fucks so try to make them as obvious as possible
		 * when you do use them or just avoid them
		 * 
		 */

		/*
		* 
		* Editor Interface
		* 
		*/

		/*
		 * 
		 * this is the plce to put all functions that custom editor scripts
		 * are supposed to call - naming convention: add a _editor to the
		 * end of the functions to differentiate them (cause it's a shit show 
		 * if they get called at runtime - especially on the client
		 * 
		 */

		/*
		* 
		* Public Interface
		* 
		*/

		/*
		 * 
		 * this is the place to put all publically accessible functions
		 * that provide an interface to other modules or the player - 
		 * try to minimize to central locations within a package to 
		 * decrease interdependency and promote decoupling
		 * 
		 */

		// Use [Server] sttribute for server-only public methods EX:
		//
		// [Server]
		// public void hurt(Entity source, float damage) {
		//
		// }

		// Use normal public functions for server+client public methods
		// public void hurt(Entity source, float damage) {
		//
		// }

		/*
		 * 
		 * Server->Client Networked Interface
		 * 
		 */

	    /*
		 * this is the place to put all server authoritative "[ClientRpc]" 
		 * functions for a given class - try to minimize to central locations
		 * within a package to decrease interdependency and promote decoupling
		 * 
		 */

		/*
		* 
		* Public
		* 
		*/

	   /*
		* 
		* Public functions for intra-module use (as opposed to public interface 
		* section - which is for inter-module use) 
		* 
		*/


		/*
		* 
		* Private
		* 
		*/

		/*
	    * 
		* private helper functions - anything other classes shouldn't call, default to
		* this section until you know it needs to go somewhere else
	    * 
		*/

//	}

//}
